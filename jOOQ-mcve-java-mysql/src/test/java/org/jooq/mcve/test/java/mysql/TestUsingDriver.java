package org.jooq.mcve.test.java.mysql;

import org.jooq.DSLContext;
import org.jooq.SQLDialect;
import org.jooq.impl.DSL;
import org.jooq.tools.JooqLogger;
import org.junit.Before;
import org.junit.BeforeClass;
import org.junit.Rule;
import org.junit.Test;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.concurrent.CompletionStage;
import java.util.concurrent.Executors;
import org.jooq.Configuration;
import org.jooq.impl.DefaultConfiguration;
import org.junit.rules.TestName;

import static org.jooq.mcve.java.mysql.Tables.TEST;
import static org.junit.Assert.assertEquals;

public class TestUsingDriver {

    static JooqLogger        log = JooqLogger.getLogger(TestUsingDriver.class);
    static Connection        connection;
    static Configuration        configuration;

    @Rule
    public TestName testName = new TestName();

    @BeforeClass
    public static void init() throws SQLException {
        log.info("Connecting");
        connection = DriverManager.getConnection(
            System.getProperty("jooq.codegen.jdbc.url"),
            System.getProperty("jooq.codegen.jdbc.username"),
            System.getProperty("jooq.codegen.jdbc.password")
        );

        configuration = new DefaultConfiguration()
            .set(connection)
            .set(SQLDialect.MYSQL)
            .set(Executors.newFixedThreadPool(5));

        // Use JDBC directly instead of jOOQ to avoid DEBUG logging all of this
        try (Statement s = connection.createStatement()) {
            log.info("Finished setup");
        }
    }

    @Before
    public void before() {
      configuration.dsl().deleteFrom(TEST).execute();
    }

    @Test
    public void testWhenTxCallbaleReturnTypeIsFuture() {
        CompletionStage<Integer> count =  configuration.dsl().transactionResult(tx -> {
                // add a row to the table asynchronously
                return tx.dsl().insertInto(TEST)
                    .columns(TEST.CD)
                    .values(42)
                    .executeAsync().thenCompose(insertedRows -> {
                        // artificial delay
                        try {
                            Thread.sleep(100);
                        } catch (InterruptedException e) {
                            throw new RuntimeException(e);
                        }

                    // get the count of rows in the table asynchronously
                    return tx.dsl().selectCount().from(TEST).executeAsync();
                });
            });
        // Wait for the future to complete
        // this will assert but in logs commit is done before the count is returned
        count.toCompletableFuture().join();
    }


}
