import org.jooq.impl.DSL
import org.jooq.meta.jaxb.Logging
import org.testcontainers.containers.PostgreSQLContainer

plugins {
    kotlin("jvm") version "1.9.22"
    id("org.jooq.jooq-codegen-gradle") version "3.20.7"
}

// TODO: Change the database driver configuration here and also in AbstractTest for the tests
val dbUsername = "postgres"
val dbPassword = "postgres"

dependencies {
    jooqCodegen("org.postgresql:postgresql:42.7.7")
    implementation("${group}:jooq:${version}")
    implementation("org.testcontainers:postgresql:1.19.8")
    implementation("org.postgresql:postgresql:42.7.7")
    testImplementation("junit:junit:4.13.2")
}

buildscript {
    dependencies {
        classpath("org.testcontainers:postgresql:1.19.8")
        classpath("org.postgresql:postgresql:42.7.7")
    }
}

tasks.register("tc-start") {
    doLast {
        val db = PostgreSQLContainer("postgres:latest")
            .withUsername("${dbUsername}")
            .withDatabaseName("postgres")
            .withPassword("${dbPassword}")
        db.start()

        // See https://www.jooq.org/doc/latest/manual/code-generation/codegen-system-properties/
        System.setProperty("jooq.codegen.jdbc.url", db.getJdbcUrl())
        System.setProperty("jooq.codegen.jdbc.username", db.getUsername())
        System.setProperty("jooq.codegen.jdbc.password", db.getPassword())
        System.setProperty("testcontainer.containerid", db.getContainerId())
        System.setProperty("testcontainer.imageName", db.getDockerImageName())

        Class.forName("org.postgresql.Driver")

        // Alternatively, use Flyway, Liquibase, etc.
        DSL.using(db.getJdbcUrl(), dbUsername, dbPassword).use { ctx ->
            File("${projectDir}/src/main/resources/db/migration/init.sql")
                .readText()
                .split(";")
                .forEach { if (it.isNotEmpty()) ctx.execute(it) }
        }
    }
}

tasks.register("tc-stop") {
    doLast {
        val containerId = System.getProperty("testcontainer.containerid")
        val imageName = System.getProperty("testcontainer.imageName")

        println("Stopping testcontainer $containerId - $imageName")
        org.testcontainers.utility.ResourceReaper
            .instance()
            .stopAndRemoveContainer(containerId, imageName);
    }
}

jooq {
    configuration {
        logging = Logging.DEBUG
        generator {
            name = "org.jooq.codegen.KotlinGenerator"
            database {
                name = "org.jooq.meta.postgres.PostgresDatabase"
                includes = ".*"
                schemata {

                    // PostgreSQL is lower case by default
                    schema {
                        inputSchema = "mcve"
                    }
                }
            }
            generate {
                isGeneratedAnnotation = false
            }
            target {
                directory = "src/main/kotlin"
                packageName = "org.jooq.mcve.kotlin.postgres"
            }
        }
    }
}

tasks.named("compileKotlin") {
    dependsOn(tasks.named("jooqCodegen"))
}

tasks.named("jooqCodegen") {
    dependsOn("tc-start")
    finalizedBy("tc-stop")
}