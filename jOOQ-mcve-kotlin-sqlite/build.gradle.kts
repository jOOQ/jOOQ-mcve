import org.jooq.impl.DSL
import org.jooq.meta.jaxb.Logging

plugins {
    kotlin("jvm") version "1.9.22"
    id("org.jooq.jooq-codegen-gradle") version "3.20.6"
}

// TODO: Change the database driver configuration here and also in AbstractTest for the tests
val dbUrl = "jdbc:sqlite:${System.getProperty("user.home")}/jooq-mcve-java.sqlite"
val dbUsername = "sa"
val dbPassword = ""

dependencies {
    jooqCodegen("org.xerial:sqlite-jdbc:3.45.3.0")
    implementation("${group}:jooq:${version}")
    implementation("org.xerial:sqlite-jdbc:3.45.3.0")
    testImplementation("junit:junit:4.13.2")
}

buildscript {
    dependencies {
        classpath("org.xerial:sqlite-jdbc:3.45.3.0")
    }
}

tasks.register("init") {
    doLast {
        Class.forName("org.sqlite.JDBC")

        // Alternatively, use Flyway, Liquibase, etc.
        DSL.using(dbUrl, dbUsername, dbPassword).use { ctx ->
            File("${projectDir}/src/main/resources/db/migration/init.sql")
                .readText()
                .split(";")
                .forEach { if (it.isNotEmpty()) ctx.execute(it) }
        }
    }
}

jooq {
    configuration {
        logging = Logging.DEBUG
        generator {
            name = "org.jooq.codegen.KotlinGenerator"
            jdbc {
                url = dbUrl
                username = dbUsername
                password = dbPassword
            }
            database {
                name = "org.jooq.meta.sqlite.SQLiteDatabase"
                includes = ".*"
                excludes = "sqlite_sequence"
            }
            generate {
                isGeneratedAnnotation = false
            }
            target {
                directory = "src/main/kotlin"
                packageName = "org.jooq.mcve.kotlin.sqlite"
            }
        }
    }
}

tasks.named("compileKotlin") {
    dependsOn(tasks.named("jooqCodegen"))
}

tasks.named("jooqCodegen") {
    dependsOn(tasks.named("init"))
}