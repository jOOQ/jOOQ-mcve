package org.jooq.mcve.test.java.oracle;

import org.jooq.DSLContext;
import org.jooq.JSON;
import org.jooq.SQLDialect;
import org.jooq.impl.DSL;
import org.jooq.mcve.java.oracle.tables.records.TestRecord;
import org.jooq.tools.JooqLogger;
import org.jooq.tools.json.JSONObject;
import org.junit.*;
import org.testcontainers.containers.OracleContainer;
import org.testcontainers.containers.wait.strategy.HostPortWaitStrategy;
import org.testcontainers.containers.wait.strategy.LogMessageWaitStrategy;
import org.testcontainers.containers.wait.strategy.WaitAllStrategy;
import org.testcontainers.utility.DockerImageName;
import org.testcontainers.utility.ResourceReaper;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.SQLException;
import java.sql.Statement;
import java.time.Duration;
import java.util.Map;

import static org.jooq.impl.DSL.*;
import static org.jooq.mcve.java.oracle.Tables.TEST;
import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNotNull;

public class JavaTest {

    static JooqLogger      log = JooqLogger.getLogger(JavaTest.class);
    static OracleContainer db;
    static Connection      connection;
    static DSLContext      ctx;

    @BeforeClass
    public static void init() throws SQLException {
        if (System.getProperty("jooq.codegen.jdbc.url") == null) {
            db = new OracleContainer(DockerImageName.parse("gvenzl/oracle-free").asCompatibleSubstituteFor("gvenzl/oracle-xe")) {
                @Override
                public String getSid() {
                    return "FREEPDB1";
                };

                @Override
                public String getDatabaseName() {
                    return "FREEPDB1";
                };
            }
                .withUsername("MCVE")
                .withPassword("MCVE")
                .withEnv("ORACLE_PASSWORD", "MCVE")
                .withEnv("APP_USER", "MCVE")
                .withEnv("APP_USER_PASSWORD", "MCVE")
                .waitingFor(new WaitAllStrategy()
                    .withStrategy(new LogMessageWaitStrategy()
                        .withRegEx(".*DATABASE IS READY TO USE!.*"))
                    .withStrategy(new HostPortWaitStrategy())
                    .withStartupTimeout(Duration.ofMinutes(5))
                )
                .withInitScript("db/migration/init.sql");
            db.start();
            System.setProperty("jooq.codegen.jdbc.url", db.getJdbcUrl());
            System.setProperty("jooq.codegen.jdbc.username", db.getUsername());
            System.setProperty("jooq.codegen.jdbc.password", db.getPassword());
        }

        log.info("Connecting");
        connection = DriverManager.getConnection(
            System.getProperty("jooq.codegen.jdbc.url"),
            System.getProperty("jooq.codegen.jdbc.username"),
            System.getProperty("jooq.codegen.jdbc.password")
        );

        ctx = DSL.using(connection, SQLDialect.ORACLE);

        // Use JDBC directly instead of jOOQ to avoid DEBUG logging all of this
        try (Statement s = connection.createStatement()) {
            log.info("Finished setup");
        }
    }

    @AfterClass
    public static void end() {
        if (db != null) {
            ResourceReaper.instance().stopAndRemoveContainer(db.getContainerId(), db.getDockerImageName());
        }
    }

    @Before
    public void setup() throws Exception {
        ctx.delete(TEST).execute();
    }

    @After
    public void after() throws Exception {
    }

    @Test
    public void mcveTest() {
        assertEquals(1,
            ctx.insertInto(TEST)
               .columns(TEST.CD)
               .values(42)
               .execute()
        );

        TestRecord record = ctx.fetchOne(TEST, TEST.CD.eq(42));
        assertNotNull(record.getId());
    }

    @Test
    public void testCharacterSemantics() {

        // the first of the following is null:
        // select four_chars from dual cross apply json_table('{"FOUR_CHARS":"HØST"}','$' columns("FOUR_CHARS" varchar2(4)));
        // select four_chars from dual cross apply json_table('{"FOUR_CHARS":"HØST"}','$' columns("FOUR_CHARS" varchar2(4 char)));

        var expectedFourChars = "HØST";

        var field = field(TEST.FOUR_CHARS.getName());
        var name = name("jt", field.getName());
        var fourCharsUserType = field(name, TEST.FOUR_CHARS.getType());      // type == varchar2(4000)
        var fourCharsDataType = field(name, TEST.FOUR_CHARS.getDataType());  // type == varchar2(4)
        var jsonObject = new JSONObject(Map.of(field.getName(), expectedFourChars));
        JSON json = JSON.json(jsonObject.toString());

        var userTypeRes = ctx.select(field)
                .from("DUAL")
                .crossApply(jsonTable(json, "$")
                        .column(fourCharsUserType)
                        .as("jt"))
                .fetchAny(field.getName());
        var dataTypeRes = ctx.select(field)
                .from("DUAL")
                .crossApply(jsonTable(json, "$")
                        .column(fourCharsDataType)
                        .as("jt"))
                .fetchAny(field.getName());

        assertEquals(expectedFourChars, userTypeRes);
        assertEquals(expectedFourChars, dataTypeRes); // <-- fails! We cannot use Jooq's computed data type for invocations of json_table
    }
}
