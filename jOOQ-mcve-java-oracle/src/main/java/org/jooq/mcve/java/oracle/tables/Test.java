/*
 * This file is generated by jOOQ.
 */
package org.jooq.mcve.java.oracle.tables;


import java.util.Collection;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;
import org.jooq.mcve.java.oracle.Keys;
import org.jooq.mcve.java.oracle.Mcve;
import org.jooq.mcve.java.oracle.tables.records.TestRecord;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class Test extends TableImpl<TestRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>MCVE.TEST</code>
     */
    public static final Test TEST = new Test();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TestRecord> getRecordType() {
        return TestRecord.class;
    }

    /**
     * The column <code>MCVE.TEST.ID</code>.
     */
    public final TableField<TestRecord, Integer> ID = createField(DSL.name("ID"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>MCVE.TEST.CD</code>.
     */
    public final TableField<TestRecord, Integer> CD = createField(DSL.name("CD"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>MCVE.TEST.FOUR_CHARS</code>.
     */
    public final TableField<TestRecord, String> FOUR_CHARS = createField(DSL.name("FOUR_CHARS"), SQLDataType.VARCHAR(4), this, "");

    private Test(Name alias, Table<TestRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private Test(Name alias, Table<TestRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>MCVE.TEST</code> table reference
     */
    public Test(String alias) {
        this(DSL.name(alias), TEST);
    }

    /**
     * Create an aliased <code>MCVE.TEST</code> table reference
     */
    public Test(Name alias) {
        this(alias, TEST);
    }

    /**
     * Create a <code>MCVE.TEST</code> table reference
     */
    public Test() {
        this(DSL.name("TEST"), null);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Mcve.MCVE;
    }

    @Override
    public Identity<TestRecord, Integer> getIdentity() {
        return (Identity<TestRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<TestRecord> getPrimaryKey() {
        return Keys.PK_TEST;
    }

    @Override
    public Test as(String alias) {
        return new Test(DSL.name(alias), this);
    }

    @Override
    public Test as(Name alias) {
        return new Test(alias, this);
    }

    @Override
    public Test as(Table<?> alias) {
        return new Test(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Test rename(String name) {
        return new Test(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Test rename(Name name) {
        return new Test(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Test rename(Table<?> name) {
        return new Test(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Test where(Condition condition) {
        return new Test(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Test where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Test where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Test where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Test where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Test where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Test where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Test where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Test whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Test whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
