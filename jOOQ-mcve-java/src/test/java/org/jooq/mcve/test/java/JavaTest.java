package org.jooq.mcve.test.java;

import org.jooq.Cursor;
import org.jooq.DSLContext;
import org.jooq.Record;
import org.jooq.RecordMapper;
import org.jooq.ResultQuery;
import org.jooq.SQLDialect;
import org.jooq.impl.DSL;
import org.junit.After;
import org.junit.Assert;
import org.junit.Before;
import org.junit.Test;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.Map;
import java.util.concurrent.Callable;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import java.util.concurrent.TimeoutException;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNotNull;

public class JavaTest {

    private Connection connection;
    private DSLContext ctx;
    private RecordMapper<Record, Map<String, Object>> mapper;
    private String userName = "postgres";
    private String password = "myPassword";
    private String url = "jdbc:postgresql://127.0.0.1:5432/postgres";
    private String selectQuery = "SELECT * FROM public.aqtmf_binder_section WHERE  " +
            "BINDER_SERIAL_NUM=" +
            " ? AND INDEX_NAME=? AND PARENT_INDEX_ID IN\n" +
            "(SELECT INDEX_ID FROM public.aqtmf_binder_section WHERE BINDER_SERIAL_NUM= ? AND" +
            " INDEX_NAME=? AND PARENT_INDEX_ID IN\n" +
            "(SELECT INDEX_ID FROM public.aqtmf_binder_section WHERE BINDER_SERIAL_NUM= ? AND" +
            " INDEX_NAME=? AND PARENT_INDEX_ID IN\n" +
            "(SELECT INDEX_ID FROM public.aqtmf_binder_section WHERE BINDER_SERIAL_NUM= ? AND" +
            "  INDEX_NAME=? AND PARENT_INDEX_ID IN\n" +
            "(SELECT INDEX_ID FROM public.aqtmf_binder_section WHERE BINDER_SERIAL_NUM= ? AND" +
            " INDEX_NAME=? AND PARENT_INDEX_ID IN\n" +
            "(SELECT INDEX_ID FROM public.aqtmf_binder_section WHERE BINDER_SERIAL_NUM= ? AND" +
            " INDEX_NAME=? AND PARENT_INDEX_ID IN \n" +
            "(SELECT INDEX_ID FROM public.aqtmf_binder_section WHERE BINDER_SERIAL_NUM= ? AND" +
            " INDEX_NAME=? AND PARENT_INDEX_ID IN \n" +
            "(SELECT INDEX_ID FROM public.aqtmf_binder_section WHERE BINDER_SERIAL_NUM= ? AND" +
            " INDEX_NAME=? AND PARENT_INDEX_ID IN \n" +
            "(SELECT INDEX_ID FROM public.aqtmf_binder_section WHERE BINDER_SERIAL_NUM= ? AND" +
            " INDEX_NAME=? AND PARENT_INDEX_NAME=? AND PARENT_INDEX_ID IN (SELECT INDEX_ID " +
            "FROM public.aqtmf_binder_section WHERE BINDER_SERIAL_NUM= ? AND INDEX_NAME=? AND" +
            " PARENT_SECTION_ID='rootNode')))))))))";
    private Object[][] data = {{84, "05.02.02 Protocol Signature Page", 84, "05.02 Site Set-up " +
            "Documentation", 84, "05 Site Management", 84, "2002083 Brandt, Wolfgang", 84,
            "Site", 84, "GERMANY", 84, "contents", 84, "eTMF", 84, "Quintiles IQVIA", "eTMF",
            84, "eTMF"},
            {84, "05.04.03 Monitoring Visit Report", 84, "05.04 Site Management", 84, "05 " +
                    "Site Management", 84, "2001744 Ponich, Terry", 84, "Site", 84, "CANADA",
                    84, "contents", 84, "eTMF", 84, "Quintiles IQVIA", "eTMF", 84, "eTMF"},
            {84, "05.04.03 Monitoring Visit Report", 84, "05.04 Site Management", 84, "05 " +
                    "Site Management", 84, "2001744 Ponich, Terry", 84, "Site", 84, "CANADA",
                    84, "contents", 84, "eTMF", 84, "Quintiles IQVIA", "eTMF", 84, "eTMF"},
            {84, "05.02.03 Proto_t Signature Page", 84, "05.02 Site Set-up Documentation", 84
                    , "05 Site Management", 84, "2002083 Brandt, Wolfgang", 84, "Site", 84,
                    "GERMANY", 84, "contents", 84, "eTMF", 84, "Quintiles IQVIA", "eTMF", 84,
                    "eTMF"},
            {84, "05.05.02 Tracking Information", 84, "05.05 General", 84, "05 Site " +
                    "Management", 84, "2002271 Moreau, Jacques", 84, "Site", 84, "FRANCE", 84
                    , "contents", 84, "eTMF", 84, "Quintiles IQVIA", "eTMF", 84, "eTMF"},
            {84, "05.02.03 Proto_t Signature Page", 84, "05.02 Site Set-up Documentation", 84
                    , "05 Site Management", 84, "2002083 Brandt, Wolfgang", 84, "Site", 84,
                    "GERMANY", 84, "contents", 84, "eTMF", 84, "Quintiles IQVIA", "eTMF", 84,
                    "eTMF"},
            {84, "05.02.02 Protocol Signature Page", 84, "05.02 Site Set-up " +
                    "Documentation", 84, "05 Site Management", 84, "2002083 Brandt, Wolfgang"
                    , 84,
                    "Site", 84, "GERMANY", 84, "contents", 84, "eTMF", 84, "Quintiles IQVIA",
                    "eTMF",
                    84, "eTMF"},
            {84, "05.04.03 Monitoring Visit Report", 84, "05.04 Site Management", 84, "05 " +
                    "Site Management", 84, "2001744 Ponich, Terry", 84, "Site", 84, "CANADA",
                    84, "contents", 84, "eTMF", 84, "Quintiles IQVIA", "eTMF", 84, "eTMF"},
            {84, "05.04.03 Monitoring Visit Report", 84, "05.04 Site Management", 84, "05 " +
                    "Site Management", 84, "2001744 Ponich, Terry", 84, "Site", 84, "CANADA",
                    84, "contents", 84, "eTMF", 84, "Quintiles IQVIA", "eTMF", 84, "eTMF"},
            {84, "05.02.03 Proto_t Signature Page", 84, "05.02 Site Set-up Documentation", 84
                    , "05 Site Management", 84, "2002083 Brandt, Wolfgang", 84, "Site", 84,
                    "GERMANY", 84, "contents", 84, "eTMF", 84, "Quintiles IQVIA", "eTMF", 84,
                    "eTMF"},
            {84, "05.05.02 Tracking Information", 84, "05.05 General", 84, "05 Site " +
                    "Management", 84, "2002271 Moreau, Jacques", 84, "Site", 84, "FRANCE", 84
                    , "contents", 84, "eTMF", 84, "Quintiles IQVIA", "eTMF", 84, "eTMF"},
            {84, "05.02.03 Proto_t Signature Page", 84, "05.02 Site Set-up Documentation", 84
                    , "05 Site Management", 84, "2002083 Brandt, Wolfgang", 84, "Site", 84,
                    "GERMANY", 84, "contents", 84, "eTMF", 84, "Quintiles IQVIA", "eTMF", 84,
                    "eTMF"}};

    @Before
    public void setup() throws Exception {
        connection = DriverManager.getConnection(url, userName, password);
        connection.setAutoCommit(false);
        ctx = DSL.using(connection, SQLDialect.POSTGRES);
        ctx.settings().setFetchSize(100);
//        ctx.settings().setStatementType(StatementType.STATIC_STATEMENT);
    }

    @After
    public void after() throws Exception {
        ctx = null;
        connection.close();
        connection = null;
    }

    @Test
    public void usingJdbcTest() {
        ExecutorService executor = Executors.newCachedThreadPool();
        try (PreparedStatement preparedStatement = connection.prepareStatement(selectQuery)) {
            int queryExecutionCount = 1;
            for (Object[] params : data) {
                Callable<Object> task = new Callable<Object>() {
                    public Object call() {
                        executeJdbcQuery(params, preparedStatement);
                        return null;
                    }
                };
                Future<Object> future = executor.submit(task);
                try {
                    System.out.println("Query execution num:" + queryExecutionCount++);
                    Object result = future.get(2, TimeUnit.MINUTES);
                } catch (TimeoutException ex) {
                    ex.printStackTrace();
                    Assert.fail();
                } catch (InterruptedException e) {
                    e.printStackTrace();
                    Assert.fail();
                } catch (ExecutionException e) {
                    e.printStackTrace();
                    Assert.fail();
                } finally {
                    future.cancel(true);
                    System.out.println("Query execution completed.");
                    // may or may not desire this
                }
            }
        } catch (SQLException throwables) {
            throwables.printStackTrace();
        }
    }

    @Test
    public void usingJooqTest() {
        ExecutorService executor = Executors.newCachedThreadPool();
        int queryExecutionCount = 1;
        for (Object[] params : data) {
            Callable<Object> task = new Callable<Object>() {
                public Object call() {
                    executeQuery(params);
                    return null;
                }
            };
            Future<Object> future = executor.submit(task);
            try {
                System.out.println("Query execution num:" + queryExecutionCount++);
                Object result = future.get(2, TimeUnit.MINUTES);
            } catch (TimeoutException ex) {
                ex.printStackTrace();
                Assert.fail();
            } catch (InterruptedException e) {
                e.printStackTrace();
                Assert.fail();
            } catch (ExecutionException e) {
                e.printStackTrace();
                Assert.fail();
            } finally {
                future.cancel(true);
                System.out.println("Query execution completed.");
                // may or may not desire this
            }
        }
    }

    private void executeQuery(Object[] params) {
        ResultQuery query = ctx.resultQuery(selectQuery, params);
        try {
            query.attach(ctx.configuration());
            try (Cursor<Record> cursor = query.fetchLazy()) {
                assertNotNull(cursor);
                while (cursor.hasNext()) {
                    Record record = cursor.fetchOne();
                    assertEquals(11, record.fields().length);
                }
            }
        } catch (Exception e) {
            Assert.fail();
        }
    }

    private void executeJdbcQuery(Object[] params, PreparedStatement preparedStatement) {
        try {
            preparedStatement.setInt(1, (Integer) params[0]);
            preparedStatement.setString(2, (String) params[1]);
            preparedStatement.setInt(3, (Integer) params[2]);
            preparedStatement.setString(4, (String) params[3]);
            preparedStatement.setInt(5, (Integer) params[4]);
            preparedStatement.setString(6, (String) params[5]);
            preparedStatement.setInt(7, (Integer) params[6]);
            preparedStatement.setString(8, (String) params[7]);
            preparedStatement.setInt(9, (Integer) params[8]);
            preparedStatement.setString(10, (String) params[9]);
            preparedStatement.setInt(11, (Integer) params[10]);
            preparedStatement.setString(12, (String) params[11]);
            preparedStatement.setInt(13, (Integer) params[12]);
            preparedStatement.setString(14, (String) params[13]);
            preparedStatement.setInt(15, (Integer) params[14]);
            preparedStatement.setString(16, (String) params[15]);
            preparedStatement.setInt(17, (Integer) params[16]);
            preparedStatement.setString(18, (String) params[17]);
            preparedStatement.setString(19, (String) params[18]);
            preparedStatement.setInt(20, (Integer) params[19]);
            preparedStatement.setString(21, (String) params[20]);
            ResultSet resultSet = preparedStatement.getResultSet();
            System.out.println("Query execution completed.");
        } catch (Exception e) {
            Assert.fail();
        }
    }
}

