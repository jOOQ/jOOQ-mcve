package org.jooq.mcve.test.java;

import org.jooq.DSLContext;
import org.jooq.Result;
import org.jooq.SQLDialect;
import org.jooq.impl.DSL;
import org.jooq.mcve.java.tables.records.TestRecord;
import org.junit.After;
import org.junit.Before;
import org.junit.Test;

import java.sql.Connection;
import java.sql.DriverManager;

import static org.jooq.mcve.java.Tables.TEST;
import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNotEquals;
import static org.junit.Assert.assertNotNull;

public class JavaTest {

    public Connection connection;
    public DSLContext ctx;

    @Before
    public void setup() throws Exception {
        connection = DriverManager.getConnection(
            System.getProperty("db.url"),
            System.getProperty("db.username"),
            System.getProperty("db.password")
        );
        ctx = DSL.using(connection, SQLDialect.POSTGRES);
        ctx.delete(TEST).execute();
    }

    @After
    public void after() throws Exception {
        ctx = null;
        connection.close();
        connection = null;
    }

    @Test
    public void mcveTest() {
        assertEquals(1,
            ctx.insertInto(TEST)
               .columns(TEST.ID, TEST.CD)
               .values(1, 1234)
               .execute()
        );

        TestRecord testRecord = ctx.newRecord(TEST);
        testRecord.setCd(42);

        assertEquals(1,
            testRecord.merge()
        );

//        Result<TestRecord> records = ctx.selectFrom(TEST).where(TEST.ID.eq(1)).fetch();
//        assertEquals(2, records.size()); // this fails as we overwritten the other row

        TestRecord record = ctx.fetchOne(TEST, TEST.CD.eq(42));
        assertNotNull(record);
        assertNotNull(record.getId());
        assertNotEquals((Integer) 1, record.getId()); // this means we overwritten the previous row!
    }
}
