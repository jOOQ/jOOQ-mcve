import org.jooq.impl.DSL
import org.jooq.meta.jaxb.Logging

plugins {
    kotlin("jvm") version "1.9.22"
    id("org.jooq.jooq-codegen-gradle") version "3.20.7"
}

// TODO: Change the database driver configuration here and also in AbstractTest for the tests
val dbUrl = "jdbc:h2:~/jooq-mcve-java-2"
val dbUsername = "sa"
val dbPassword = ""

dependencies {
    jooqCodegen("com.h2database:h2:2.2.224")
    implementation("${group}:jooq:${version}")
    implementation("com.h2database:h2:2.2.224")
    testImplementation("junit:junit:4.13.2")
}

buildscript {
    dependencies {
        classpath("com.h2database:h2:2.2.224")
    }
}

tasks.register("init") {
    doLast {
        Class.forName("org.h2.Driver")

        // Alternatively, use Flyway, Liquibase, etc.
        DSL.using(dbUrl, dbUsername, dbPassword).use { ctx ->
            File("${projectDir}/src/main/resources/db/migration/init.sql")
                .readText()
                .split(";")
                .forEach { if (it.isNotEmpty()) ctx.execute(it) }
        }
    }
}

jooq {
    configuration {
        logging = Logging.DEBUG
        generator {
            name = "org.jooq.codegen.KotlinGenerator"
            jdbc {
                url = dbUrl
                username = dbUsername
                password = dbPassword
            }
            database {
                name = "org.jooq.meta.h2.H2Database"
                includes = ".*"
                schemata {

                    // H2 and others are upper case by default
                    schema {
                        inputSchema = "MCVE"
                    }
                }
            }
            generate {
                isGeneratedAnnotation = false
            }
            target {
                directory = "src/main/kotlin"
                packageName = "org.jooq.mcve.kotlin.h2"
            }
        }
    }
}

tasks.named("compileKotlin") {
    dependsOn(tasks.named("jooqCodegen"))
}

tasks.named("jooqCodegen") {
    dependsOn(tasks.named("init"))
}